parameters:
  name: 'Generate bindings'
  vmImage: 'Ubuntu-16.04'
  py_maj: '3'
  py_min: '6'
  config_file: 'ocp.toml'
  conda_bld: '3.16.3'
  conda_env_file: 'env.yml'
  CXX: g++-8

jobs:
- job: ${{ parameters.name }}_${{ parameters.py_maj }}_${{ parameters.py_min }}
  timeoutInMinutes: 360

  pool:
    vmImage: ${{ parameters.vmImage }}

  variables:
    n_cores: 2

  steps:

  - ${{ if contains(parameters.vmImage, 'Ubuntu') }}:
    - bash: sudo apt-get install ${{ parameters.CXX }} mesa-common-dev libgl1-mesa-dev libglu1-mesa-dev freeglut3-dev
      displayName: 'Install g++8 and gl headers'

  - ${{ if contains(parameters.vmImage, 'mac') }}:
    - bash: |
        sudo find /Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/System/Library/Frameworks/ && \
        ln -s "$(xcrun --sdk macosx --show-sdk-path)/System/Library/Frameworks/OpenGL.framework/Headers" /usr/local/include/OpenGL
      displayName: 'Search for GL'

  - template: conda-enable.yml@templates
    parameters:
      vmImage: ${{ parameters.vmImage }}

  - bash: |
      conda env create -f ${{ parameters.conda_env_file }}
    displayName: 'Prepare conda environment'


  - bash: |
      source activate cpp-py-bindgen && \
      conda info -a && \
      which python && \
      env
    displayName: 'Conda env sanity checks'

  - bash: |
      source activate cpp-py-bindgen && \
      OUTPUT=`python -c'import toml; print(toml.load("${{ parameters.config_file }}")["output_folder"])'`  && \
      echo $OUTPUT && \
      echo "##vso[task.setvariable variable=OUTPUT;isOutput=true]$OUTPUT"
    displayName: 'Read output dir from the config file'
    name: 'conf'

  - bash: |
      source activate cpp-py-bindgen && \
      python -m bindgen -n $(n_cores) parse ${{ parameters.config_file }} out.pkl && \
      python -m bindgen -n $(n_cores) transform ${{ parameters.config_file }} out.pkl out_f.pkl && \
      python -m bindgen -n $(n_cores) generate ${{ parameters.config_file }} out_f.pkl
    displayName: 'Generate'

  - task: CopyFiles@2
    inputs:
      contents: 'out*.pkl'
      targetFolder: $(conf.OUTPUT)
    displayName: 'Copy pkl outputs'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(conf.OUTPUT)
      artifactName: OCP_src
    displayName: 'Publish resulting code'

  - ${{ if not(contains(parameters.vmImage, 'win')) }}:
    - bash: |
        source activate cpp-py-bindgen && \
        cmake -B build -S "$(conf.OUTPUT)" -G Ninja -DCMAKE_BUILD_TYPE=Release && \
        cmake --build build -j $(n_cores) && \
        rm -rf build/CMakeFiles
      displayName: 'Compile'
      env:
        CXX: ${{ parameters.CXX }}

  - ${{ if contains(parameters.vmImage, 'win') }}:
    - script: |
        call "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat"
        call activate cpp-py-bindgen
        cmake -B build -S "$(conf.OUTPUT)" -G Ninja -DCMAKE_BUILD_TYPE=Release
        cmake --build build -j $(n_cores)
        rmdir /S /Q build/CMakeFiles
      displayName: 'Compile'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'build'
      artifactName: OCP
    displayName: 'Publish compilation result'

  - bash: |
      source activate cpp-py-bindgen && \
      cd build && \
      LD_DEBUG=libs python -c"import OCP"
    displayName: 'Test'
