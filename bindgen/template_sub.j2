{% from "macros.j2" import cls_name,pointer,super,argtypes,argnames,method_pointer,
static_method_pointer,function_pointer,template_args_typename,template_args,
template_method_pointer,template_static_method_pointer, template_pointer,
prototype, pybind_overload %}

// pybind 11 related includes
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

// Standard Handle
#include <Standard_Handle.hxx>

// includes to resolve forward declarations
{% for h in module.headers %}{% for f in h.forwards %}{% if f.name in class_dict %}
#include <{{ class_dict[f.name].splitpath()[-1] }}>
{% endif %}{% endfor %}{% endfor %}

// module includes
{% for h in module.headers %}
#include <{{ h.short_name }}>
{% endfor %}

// template related includes
{% for h in module.headers %}
{% for td in h.typedefs %}
{% if not td.pod and not "_H" in td.name and td.template_base.__len__()>0 and not td.type.startswith("opencascade::handle") %}
// {{h.name}}
{% set dep_module = td.type.split("_") %}
#include "{{dep_module[0]}}.hxx"
{% endif %}
{% endfor %}
{% endfor %}


// user-defined pre
{% if include_pre %}
#include "{{ include_pre }}"
{% endif %}

// user-defined inclusion per module
{% if module_settings['include_header_pre'] %}
{{ module_settings['include_header_pre'] }}
{% endif %}

// Module definiiton
void register_{{module.name}}(py::module &main_module) {


py::module m = main_module.def_submodule("{{module.name}}", R"#({{module.doc}})#");

// enums
{% for enum in module.enums %}
{% if enum.anonymous %}
    {% for val in enum.values %}
    m.attr("{{ val }}") = py::cast(int({{ val }}));
    {% endfor %}
{% else %}
    py::enum_<{{enum.name}}>(m, "{{enum.name}}",R"#({{enum.comment}})#")
    {% for val in enum.values %}
        .value("{{val}}",{{enum.name}}::{{val}}){{ ".export_values();" if loop.last }}
    {% endfor %}
{% endif %}
{% endfor %}

//Python trampoline classes
{% for c in module.classes %}{% if c.abstract %}
    class Py_{{c.name}} : public {{c.name}}{
    public:
        using {{c.name}}::{{c.name}};
        
        // public pure virtual
        {% for m in c.methods %}{% if m.pure_virtual %}
        {{ prototype(m) }} override { {{pybind_overload(c,m)}} };
        {% endif %}{% endfor %}
        
        {% for super in c.superclasses %}
        {% for p in module.classes %}{% if super == p.name %}
        {% for m in p.methods %}{% if m.pure_virtual and m.name not in c.methods_dict%}
        {{ prototype(m) }} override { {{pybind_overload(p,m)}} };
        {% endif %}{% endfor %}
        {% endif %}{% endfor %}
        {% endfor %}
        
        // protected pure virtual
        {% for m in c.protected_virtual_methods %}
        {{ prototype(m) }} override { {{pybind_overload(c,m)}} };
        {% endfor %}
        
        {% for super in c.superclasses %}
        {% for p in module.classes %}{% if super == p.name %}
        {% for m in p.protected_virtual_methods %}{% if m.name not in c.protected_virtual_methods_dict%}
        {{ prototype(m) }} override { {{pybind_overload(p,m)}} };
        {% endif %}{% endfor %}
        {% endif %}{% endfor %}
        {% endfor %}
        
        // private pure virtual
        {% for m in c.private_virtual_methods %}
        {{ prototype(m) }} override { {{pybind_overload(c,m)}} };
        {% endfor %}
        
        {% for super in c.superclasses %}
        {% for p in module.classes %}{% if super == p.name %}
        {% for m in p.private_virtual_methods %}{% if m.name not in c.private_virtual_methods_dict%}
        {{ prototype(m) }} override { {{pybind_overload(p,m)}} };
        {% endif %}{% endfor %}
        {% endif %}{% endfor %}
        {% endfor %}
    };
{% endif %}{% endfor %}

// classes
{% for c in module.classes %}{% if (proper_new_operator(c) and proper_delete_operator(c)) or c.rootclass =='Standard_Transient' %}
    py::class_<{{c.name}} {{pointer(c)}} {% if c.abstract %},Py_{{c.name}}{% endif %} {{super(c,class_dict)}}>(m,"{{cls_name(c)}}",R"#({{c.comment}})#")
    {% for con in c.constructors %}
    {% if not con.pointer_by_ref %}
        .def(py::init< {{ argtypes(con) }} >() {{argnames(con)}} )
    {% endif %}
    {% endfor %}
    {% for m in c.methods %}
    {% if not m.pointer_by_ref %}
        .def("{{m.name}}",
             {{ method_pointer(c,m) }},
             R"#({{m.comment}})#" {{argnames(m)}})
    {% endif %}
    {% endfor %}
    {% for m in c.static_methods %}
    {% if not m.pointer_by_ref %}
        .def_static("{{m.name}}_s",
                    {{ static_method_pointer(c,m) }},
                    R"#({{m.comment}})#" {{argnames(m)}})
    {% endif %}
    {% endfor %}
    {% for op in c.operators %}
    {% if op.name in operator_dict %}
    {% for py_op in operator_dict[op.name] %}
        .def("{{py_op}}",
             {{ method_pointer(c,op) }},
             py::is_operator(),
             R"#({{op.comment}})#" {{argnames(op)}})
    {% endfor %}
    {% endif %}
    {% endfor %};
{% endif %}{% endfor %}

// functions
{% for h in module.headers %}
// {{h.name}}
{% for f in h.functions %}
    m.def("{{f.name}}", 
          {{ function_pointer(f) }},
          R"#({{ f.comment }})#" {{argnames(f)}});
{% endfor %}
{% endfor %}

// operators
{% for op in module.operators %}
{% if op.name in operator_dict %}
{% for py_op in operator_dict[op.name] %}
    m.def("{{py_op}}", 
          {{ function_pointer(op) }},
          py::is_operator(),
          R"#({{ op.comment }})#" {{argnames(op)}});
{% endfor %}
{% endif %}
{% endfor %}

// register typdefs
{% for h in module.headers %}
// {{h.name}}
{% for td in h.typedefs %}
{% if not td.pod and not "_H" in td.name and td.template_base.__len__()>0 and not td.type.startswith("opencascade::handle") %}
{% set dep_module = td.template_base[0].split("_") %}
{% set arg = td.type.split(td.template_base[0])[-1] %}
{% set base =  td.template_base[0] %}
{% if not arg.endswith("::Iterator") %}
    register_template_{{ base }}{{ arg }}(m,"{{td.name}}");  
{% endif %}
{% endif %}
{% endfor %}
{% endfor %}


// exceptions
{% for ex in module.exceptions %}
register_occ_exception<{{ex.name}}>(m, "{{ex.name}}");
{% endfor %}

// user-defined post-inclusion per module
{% if module_settings['include_header_post'] %}
{{ module_settings['include_header_post'] }}
{% endif %}

};

// user-defined post
{% if include_post %}
#include "{{ include_post }}"
{% endif %}